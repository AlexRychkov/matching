plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.11'
    id 'jacoco' // Code coverage
    id 'nl.fabianm.kotlin.plugin.generated' version '1.3.0' // Exclude Kotlin generated code in code coverage
}

group 'jasition'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    // Arrow (Monads)
    implementation("io.arrow-kt:arrow-core:0.8.1") {
        exclude group: 'org.jetbrains.kotlin'
    }
    testCompile("io.arrow-kt:arrow-test:0.8.1") {
        exclude group: 'io.kotlintest'
    }

    // Vavr (Persistent collections only)
    compile "io.vavr:vavr:0.9.2"
    compile('io.vavr:vavr-kotlin:0.9.2') {
        exclude group: 'org.jetbrains.kotlin'
    }

    // Kotlin Test (Test framework and fluent assertions)
    testCompile 'io.kotlintest:kotlintest-runner-junit5:3.1.11'
    testCompile 'org.jetbrains.kotlin:kotlin-reflect:1.3.11'

    // MockK (Mocking and spying framework)
    testImplementation('io.mockk:mockk:1.8.13') {
        exclude group: 'io.kotlintest'
    }
}

test {
    failFast = true

    useJUnitPlatform {
        includeEngines 'spek', 'junit-jupiter', 'kotlintest'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest results: ${result.resultType} " +
                    "(${result.testCount} tests completed, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped)"
        }
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jacoco {
    toolVersion = "0.8.2"
    reportsDir = file("$buildDir/reports/coverage")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage/html")
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/scenario/**',
                              '**/benchmark/**'
                    ]
            )
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 1
            }
        }
    }
}
